From 0cc6584fa10b7c8312e096670896b0b483bdb1fd Mon Sep 17 00:00:00 2001
From: Krzysztof Chojnowski <krzysiek@embedev.pl>
Date: Wed, 1 Jul 2020 12:09:45 +0200
Subject: [PATCH] Uptated ILI9881C driver for Powertip PH720128T003

---
 drivers/clk/clk-stm32mp1.c                    |  10 +-
 drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c |  67 ++--
 drivers/gpu/drm/panel/panel-ilitek-ili9881c.c | 366 ++++++++----------
 drivers/gpu/drm/stm/ltdc.c                    |   6 -
 4 files changed, 196 insertions(+), 253 deletions(-)

diff --git a/drivers/clk/clk-stm32mp1.c b/drivers/clk/clk-stm32mp1.c
index 4a282bfd2..77b0488de 100644
--- a/drivers/clk/clk-stm32mp1.c
+++ b/drivers/clk/clk-stm32mp1.c
@@ -2007,8 +2007,8 @@ static const struct clock_config stm32mp1_clock_cfg[] = {
 	PCLK(TMPSENS, "tmpsens", "pclk3", 0, G_TMPSENS),
 	PCLK(PMBCTRL, "pmbctrl", "pclk3", 0, G_PMBCTRL),
 	PCLK(HDP, "hdp", "pclk3", 0, G_HDP),
-	PCLK(LTDC, "ltdc", "pclk4", 0, G_LTDC),
-	PCLK(DSI, "dsi", "pclk4", 0, G_DSI),
+	PCLK(LTDC, "ltdc", "pclk4", CLK_IS_CRITICAL, G_LTDC),
+	PCLK(DSI, "dsi", "pclk4", CLK_IS_CRITICAL, G_DSI),
 	PCLK(IWDG2, "iwdg2", "pclk4", 0, G_IWDG2),
 	PCLK(USBPHY, "usbphy", "pclk4", 0, G_USBPHY),
 	PCLK(STGENRO, "stgenro", "pclk4", 0, G_STGENRO),
@@ -2112,15 +2112,15 @@ static const struct clock_config stm32mp1_clock_cfg[] = {
 	KCLK(SAI3_K, "sai3_k", sai_src, 0, G_SAI3, M_SAI3),
 	KCLK(SAI4_K, "sai4_k", sai_src, 0, G_SAI4, M_SAI4),
 	KCLK(ADC12_K, "adc12_k", adc12_src, 0, G_ADC12, M_ADC12),
-	KCLK(DSI_K, "dsi_k", dsi_src, 0, G_DSI, M_DSI),
+	KCLK(DSI_K, "dsi_k", dsi_src, CLK_IS_CRITICAL, G_DSI, M_DSI),
 	KCLK(ADFSDM_K, "adfsdm_k", sai_src, 0, G_ADFSDM, M_SAI1),
 	KCLK(USBO_K, "usbo_k", usbo_src, 0, G_USBO, M_USBO),
 	KCLK(ETHCK_K, "ethck_k", eth_src, 0, G_ETHCK, M_ETHCK),
 
 	/* Particulary Kernel Clocks (no mux or no gate) */
 	MGATE_MP1(DFSDM_K, "dfsdm_k", "ck_mcu", 0, G_DFSDM),
-	MGATE_MP1(DSI_PX, "dsi_px", "pll4_q", CLK_SET_RATE_PARENT, G_DSI),
-	MGATE_MP1(LTDC_PX, "ltdc_px", "pll4_q", CLK_SET_RATE_PARENT, G_LTDC),
+	MGATE_MP1(DSI_PX, "dsi_px", "pll4_q", CLK_IS_CRITICAL | CLK_SET_RATE_PARENT, G_DSI),
+	MGATE_MP1(LTDC_PX, "ltdc_px", "pll4_q", CLK_IS_CRITICAL | CLK_SET_RATE_PARENT, G_LTDC),
 	MGATE_MP1(GPU_K, "gpu_k", "pll2_q", 0, G_GPU),
 	MGATE_MP1(DAC12_K, "dac12_k", "ck_lsi", 0, G_DAC12),
 
diff --git a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
index 1389bbfa0..a205cba5f 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
@@ -236,6 +236,8 @@
 #define PHY_STATUS_TIMEOUT_US		10000
 #define CMD_PKT_STATUS_TIMEOUT_US	20000
 
+static bool first_pass = true;
+
 struct dw_mipi_dsi {
 	struct drm_bridge bridge;
 	struct mipi_dsi_host dsi_host;
@@ -961,31 +963,34 @@ static void dw_mipi_dsi_mode_set(struct dw_mipi_dsi *dsi,
 		DRM_DEBUG_DRIVER("Phy get_lane_mbps() failed\n");
 
 	pm_runtime_get_sync(dsi->dev);
-	dw_mipi_dsi_init(dsi);
-	dw_mipi_dsi_dpi_config(dsi, adjusted_mode);
-	dw_mipi_dsi_packet_handler_config(dsi);
-	dw_mipi_dsi_video_mode_config(dsi);
-	dw_mipi_dsi_video_packet_config(dsi, adjusted_mode);
-	dw_mipi_dsi_command_mode_config(dsi);
-	dw_mipi_dsi_line_timer_config(dsi, adjusted_mode);
-	dw_mipi_dsi_vertical_timing_config(dsi, adjusted_mode);
-
-	dw_mipi_dsi_dphy_init(dsi);
-	dw_mipi_dsi_dphy_timing_config(dsi);
-	dw_mipi_dsi_dphy_interface_config(dsi);
-
-	dw_mipi_dsi_clear_err(dsi);
-
-	ret = phy_ops->init(priv_data);
-	if (ret)
-		DRM_DEBUG_DRIVER("Phy init() failed\n");
 
-	dw_mipi_dsi_dphy_enable(dsi);
+	if (!first_pass) {
+		dw_mipi_dsi_init(dsi);
+		dw_mipi_dsi_dpi_config(dsi, adjusted_mode);
+		dw_mipi_dsi_packet_handler_config(dsi);
+		dw_mipi_dsi_video_mode_config(dsi);
+		dw_mipi_dsi_video_packet_config(dsi, adjusted_mode);
+		dw_mipi_dsi_command_mode_config(dsi);
+		dw_mipi_dsi_line_timer_config(dsi, adjusted_mode);
+		dw_mipi_dsi_vertical_timing_config(dsi, adjusted_mode);
 
-	dw_mipi_dsi_wait_for_two_frames(adjusted_mode);
+		dw_mipi_dsi_dphy_init(dsi);
+		dw_mipi_dsi_dphy_timing_config(dsi);
+		dw_mipi_dsi_dphy_interface_config(dsi);
 
-	/* Switch to cmd mode for panel-bridge pre_enable & panel prepare */
-	dw_mipi_dsi_set_mode(dsi, 0);
+		dw_mipi_dsi_clear_err(dsi);
+
+		ret = phy_ops->init(priv_data);
+		if (ret)
+			DRM_DEBUG_DRIVER("Phy init() failed\n");
+
+		dw_mipi_dsi_dphy_enable(dsi);
+
+		dw_mipi_dsi_wait_for_two_frames(adjusted_mode);
+
+		/* Switch to cmd mode for panel-bridge pre_enable & panel prepare */
+		dw_mipi_dsi_set_mode(dsi, 0);
+	}
 }
 
 static void dw_mipi_dsi_bridge_mode_set(struct drm_bridge *bridge,
@@ -1005,12 +1010,16 @@ static void dw_mipi_dsi_bridge_enable(struct drm_bridge *bridge)
 	const struct dw_mipi_dsi_phy_ops *phy_ops = dsi->plat_data->phy_ops;
 
 	/* Switch to video mode for panel-bridge enable & panel enable */
-	dw_mipi_dsi_set_mode(dsi, MIPI_DSI_MODE_VIDEO);
-	if (dsi->slave)
-		dw_mipi_dsi_set_mode(dsi->slave, MIPI_DSI_MODE_VIDEO);
+	if (!first_pass) {
+		dw_mipi_dsi_set_mode(dsi, MIPI_DSI_MODE_VIDEO);
+		if (dsi->slave)
+			dw_mipi_dsi_set_mode(dsi->slave, MIPI_DSI_MODE_VIDEO);
 
-	if (phy_ops->power_on)
-		phy_ops->power_on(dsi->plat_data->priv_data);
+		if (phy_ops->power_on)
+			phy_ops->power_on(dsi->plat_data->priv_data);
+	} else {
+		first_pass = false;
+	}
 }
 
 static enum drm_mode_status
@@ -1141,10 +1150,6 @@ __dw_mipi_dsi_probe(struct platform_device *pdev,
 			return ERR_PTR(ret);
 		}
 
-		reset_control_assert(apb_rst);
-		usleep_range(10, 20);
-		reset_control_deassert(apb_rst);
-
 		clk_disable_unprepare(dsi->pclk);
 	}
 
diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
index 3ad4a46c4..3ad95a0b1 100644
--- a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
@@ -28,79 +28,52 @@ struct ili9881c {
 	struct backlight_device *backlight;
 	struct regulator	*power;
 	struct gpio_desc	*reset;
-};
-
-enum ili9881c_op {
-	ILI9881C_SWITCH_PAGE,
-	ILI9881C_COMMAND,
+	bool prepared;
 };
 
 struct ili9881c_instr {
-	enum ili9881c_op	op;
-
-	union arg {
-		struct cmd {
-			u8	cmd;
-			u8	data;
-		} cmd;
-		u8	page;
-	} arg;
+        u8 cmd;
+        u8 data;
 };
 
-#define ILI9881C_SWITCH_PAGE_INSTR(_page)	\
-	{					\
-		.op = ILI9881C_SWITCH_PAGE,	\
-		.arg = {			\
-			.page = (_page),	\
-		},				\
-	}
+#define ILI9881C_COMMAND_INSTR(CMD, DATA)     {.cmd = CMD, .data = DATA}
 
-#define ILI9881C_COMMAND_INSTR(_cmd, _data)		\
-	{						\
-		.op = ILI9881C_COMMAND,		\
-		.arg = {				\
-			.cmd = {			\
-				.cmd = (_cmd),		\
-				.data = (_data),	\
-			},				\
-		},					\
-	}
 
 static const struct ili9881c_instr ili9881c_init[] = {
-	ILI9881C_SWITCH_PAGE_INSTR(3),
+	ILI9881C_COMMAND_INSTR(0xFF, 0x03),
 	ILI9881C_COMMAND_INSTR(0x01, 0x00),
 	ILI9881C_COMMAND_INSTR(0x02, 0x00),
-	ILI9881C_COMMAND_INSTR(0x03, 0x73),
-	ILI9881C_COMMAND_INSTR(0x04, 0x03),
+	ILI9881C_COMMAND_INSTR(0x03, 0x55),
+	ILI9881C_COMMAND_INSTR(0x04, 0x13),
 	ILI9881C_COMMAND_INSTR(0x05, 0x00),
 	ILI9881C_COMMAND_INSTR(0x06, 0x06),
-	ILI9881C_COMMAND_INSTR(0x07, 0x06),
+	ILI9881C_COMMAND_INSTR(0x07, 0x01),
 	ILI9881C_COMMAND_INSTR(0x08, 0x00),
-	ILI9881C_COMMAND_INSTR(0x09, 0x18),
-	ILI9881C_COMMAND_INSTR(0x0a, 0x04),
-	ILI9881C_COMMAND_INSTR(0x0b, 0x00),
-	ILI9881C_COMMAND_INSTR(0x0c, 0x02),
-	ILI9881C_COMMAND_INSTR(0x0d, 0x03),
-	ILI9881C_COMMAND_INSTR(0x0e, 0x00),
-	ILI9881C_COMMAND_INSTR(0x0f, 0x25),
-	ILI9881C_COMMAND_INSTR(0x10, 0x25),
+	ILI9881C_COMMAND_INSTR(0x09, 0x01),
+	ILI9881C_COMMAND_INSTR(0x0A, 0x01),
+	ILI9881C_COMMAND_INSTR(0x0B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0F, 0x18),
+	ILI9881C_COMMAND_INSTR(0x10, 0x18),
 	ILI9881C_COMMAND_INSTR(0x11, 0x00),
 	ILI9881C_COMMAND_INSTR(0x12, 0x00),
 	ILI9881C_COMMAND_INSTR(0x13, 0x00),
 	ILI9881C_COMMAND_INSTR(0x14, 0x00),
 	ILI9881C_COMMAND_INSTR(0x15, 0x00),
-	ILI9881C_COMMAND_INSTR(0x16, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x16, 0x00),
 	ILI9881C_COMMAND_INSTR(0x17, 0x00),
 	ILI9881C_COMMAND_INSTR(0x18, 0x00),
 	ILI9881C_COMMAND_INSTR(0x19, 0x00),
-	ILI9881C_COMMAND_INSTR(0x1a, 0x00),
-	ILI9881C_COMMAND_INSTR(0x1b, 0x00),
-	ILI9881C_COMMAND_INSTR(0x1c, 0x00),
-	ILI9881C_COMMAND_INSTR(0x1d, 0x00),
-	ILI9881C_COMMAND_INSTR(0x1e, 0xC0),
-	ILI9881C_COMMAND_INSTR(0x1f, 0x80),
-	ILI9881C_COMMAND_INSTR(0x20, 0x04),
-	ILI9881C_COMMAND_INSTR(0x21, 0x01),
+	ILI9881C_COMMAND_INSTR(0x1A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1E, 0x44),
+	ILI9881C_COMMAND_INSTR(0x1F, 0x80),
+	ILI9881C_COMMAND_INSTR(0x20, 0x02),
+	ILI9881C_COMMAND_INSTR(0x21, 0x03),
 	ILI9881C_COMMAND_INSTR(0x22, 0x00),
 	ILI9881C_COMMAND_INSTR(0x23, 0x00),
 	ILI9881C_COMMAND_INSTR(0x24, 0x00),
@@ -109,12 +82,12 @@ static const struct ili9881c_instr ili9881c_init[] = {
 	ILI9881C_COMMAND_INSTR(0x27, 0x00),
 	ILI9881C_COMMAND_INSTR(0x28, 0x33),
 	ILI9881C_COMMAND_INSTR(0x29, 0x03),
-	ILI9881C_COMMAND_INSTR(0x2a, 0x00),
-	ILI9881C_COMMAND_INSTR(0x2b, 0x00),
-	ILI9881C_COMMAND_INSTR(0x2c, 0x00),
-	ILI9881C_COMMAND_INSTR(0x2d, 0x00),
-	ILI9881C_COMMAND_INSTR(0x2e, 0x00),
-	ILI9881C_COMMAND_INSTR(0x2f, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2F, 0x00),
 	ILI9881C_COMMAND_INSTR(0x30, 0x00),
 	ILI9881C_COMMAND_INSTR(0x31, 0x00),
 	ILI9881C_COMMAND_INSTR(0x32, 0x00),
@@ -123,14 +96,14 @@ static const struct ili9881c_instr ili9881c_init[] = {
 	ILI9881C_COMMAND_INSTR(0x35, 0x00),
 	ILI9881C_COMMAND_INSTR(0x36, 0x00),
 	ILI9881C_COMMAND_INSTR(0x37, 0x00),
-	ILI9881C_COMMAND_INSTR(0x38, 0x3C),
+	ILI9881C_COMMAND_INSTR(0x38, 0x01),
 	ILI9881C_COMMAND_INSTR(0x39, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3a, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3b, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3c, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3d, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3e, 0x00),
-	ILI9881C_COMMAND_INSTR(0x3f, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3F, 0x00),
 	ILI9881C_COMMAND_INSTR(0x40, 0x00),
 	ILI9881C_COMMAND_INSTR(0x41, 0x00),
 	ILI9881C_COMMAND_INSTR(0x42, 0x00),
@@ -141,117 +114,121 @@ static const struct ili9881c_instr ili9881c_init[] = {
 	ILI9881C_COMMAND_INSTR(0x52, 0x45),
 	ILI9881C_COMMAND_INSTR(0x53, 0x67),
 	ILI9881C_COMMAND_INSTR(0x54, 0x89),
-	ILI9881C_COMMAND_INSTR(0x55, 0xab),
+	ILI9881C_COMMAND_INSTR(0x55, 0xAB),
 	ILI9881C_COMMAND_INSTR(0x56, 0x01),
 	ILI9881C_COMMAND_INSTR(0x57, 0x23),
 	ILI9881C_COMMAND_INSTR(0x58, 0x45),
 	ILI9881C_COMMAND_INSTR(0x59, 0x67),
-	ILI9881C_COMMAND_INSTR(0x5a, 0x89),
-	ILI9881C_COMMAND_INSTR(0x5b, 0xab),
-	ILI9881C_COMMAND_INSTR(0x5c, 0xcd),
-	ILI9881C_COMMAND_INSTR(0x5d, 0xef),
-	ILI9881C_COMMAND_INSTR(0x5e, 0x11),
-	ILI9881C_COMMAND_INSTR(0x5f, 0x02),
-	ILI9881C_COMMAND_INSTR(0x60, 0x02),
-	ILI9881C_COMMAND_INSTR(0x61, 0x02),
-	ILI9881C_COMMAND_INSTR(0x62, 0x02),
-	ILI9881C_COMMAND_INSTR(0x63, 0x02),
-	ILI9881C_COMMAND_INSTR(0x64, 0x02),
-	ILI9881C_COMMAND_INSTR(0x65, 0x02),
+	ILI9881C_COMMAND_INSTR(0x5A, 0x89),
+	ILI9881C_COMMAND_INSTR(0x5B, 0xAB),
+	ILI9881C_COMMAND_INSTR(0x5C, 0xCD),
+	ILI9881C_COMMAND_INSTR(0x5D, 0xEF),
+	ILI9881C_COMMAND_INSTR(0x5E, 0x11),
+	ILI9881C_COMMAND_INSTR(0x5F, 0x14),
+	ILI9881C_COMMAND_INSTR(0x60, 0x15),
+	ILI9881C_COMMAND_INSTR(0x61, 0x0F),
+	ILI9881C_COMMAND_INSTR(0x62, 0x0D),
+	ILI9881C_COMMAND_INSTR(0x63, 0x0E),
+	ILI9881C_COMMAND_INSTR(0x64, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x65, 0x06),
 	ILI9881C_COMMAND_INSTR(0x66, 0x02),
 	ILI9881C_COMMAND_INSTR(0x67, 0x02),
 	ILI9881C_COMMAND_INSTR(0x68, 0x02),
 	ILI9881C_COMMAND_INSTR(0x69, 0x02),
-	ILI9881C_COMMAND_INSTR(0x6a, 0x0C),
-	ILI9881C_COMMAND_INSTR(0x6b, 0x02),
-	ILI9881C_COMMAND_INSTR(0x6c, 0x0F),
-	ILI9881C_COMMAND_INSTR(0x6d, 0x0E),
-	ILI9881C_COMMAND_INSTR(0x6e, 0x0D),
-	ILI9881C_COMMAND_INSTR(0x6f, 0x06),
-	ILI9881C_COMMAND_INSTR(0x70, 0x07),
-	ILI9881C_COMMAND_INSTR(0x71, 0x02),
-	ILI9881C_COMMAND_INSTR(0x72, 0x02),
-	ILI9881C_COMMAND_INSTR(0x73, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6A, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6B, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6C, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6D, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6E, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6F, 0x02),
+	ILI9881C_COMMAND_INSTR(0x70, 0x02),
+	ILI9881C_COMMAND_INSTR(0x71, 0x00),
+	ILI9881C_COMMAND_INSTR(0x72, 0x01),
+	ILI9881C_COMMAND_INSTR(0x73, 0x08),
 	ILI9881C_COMMAND_INSTR(0x74, 0x02),
-	ILI9881C_COMMAND_INSTR(0x75, 0x02),
-	ILI9881C_COMMAND_INSTR(0x76, 0x02),
-	ILI9881C_COMMAND_INSTR(0x77, 0x02),
-	ILI9881C_COMMAND_INSTR(0x78, 0x02),
-	ILI9881C_COMMAND_INSTR(0x79, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7a, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7b, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7c, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7d, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7e, 0x02),
-	ILI9881C_COMMAND_INSTR(0x7f, 0x02),
-	ILI9881C_COMMAND_INSTR(0x80, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x75, 0x14),
+	ILI9881C_COMMAND_INSTR(0x76, 0x15),
+	ILI9881C_COMMAND_INSTR(0x77, 0x0F),
+	ILI9881C_COMMAND_INSTR(0x78, 0x0D),
+	ILI9881C_COMMAND_INSTR(0x79, 0x0E),
+	ILI9881C_COMMAND_INSTR(0x7A, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x7B, 0x08),
+	ILI9881C_COMMAND_INSTR(0x7C, 0x02),
+	ILI9881C_COMMAND_INSTR(0x7D, 0x02),
+	ILI9881C_COMMAND_INSTR(0x7E, 0x02),
+	ILI9881C_COMMAND_INSTR(0x7F, 0x02),
+	ILI9881C_COMMAND_INSTR(0x80, 0x02),
 	ILI9881C_COMMAND_INSTR(0x81, 0x02),
-	ILI9881C_COMMAND_INSTR(0x82, 0x0F),
-	ILI9881C_COMMAND_INSTR(0x83, 0x0E),
-	ILI9881C_COMMAND_INSTR(0x84, 0x0D),
-	ILI9881C_COMMAND_INSTR(0x85, 0x06),
-	ILI9881C_COMMAND_INSTR(0x86, 0x07),
-	ILI9881C_COMMAND_INSTR(0x87, 0x02),
-	ILI9881C_COMMAND_INSTR(0x88, 0x02),
-	ILI9881C_COMMAND_INSTR(0x89, 0x02),
+	ILI9881C_COMMAND_INSTR(0x82, 0x02),
+	ILI9881C_COMMAND_INSTR(0x83, 0x02),
+	ILI9881C_COMMAND_INSTR(0x84, 0x02),
+	ILI9881C_COMMAND_INSTR(0x85, 0x02),
+	ILI9881C_COMMAND_INSTR(0x86, 0x02),
+	ILI9881C_COMMAND_INSTR(0x87, 0x00),
+	ILI9881C_COMMAND_INSTR(0x88, 0x01),
+	ILI9881C_COMMAND_INSTR(0x89, 0x06),
 	ILI9881C_COMMAND_INSTR(0x8A, 0x02),
-	ILI9881C_SWITCH_PAGE_INSTR(4),
+	ILI9881C_COMMAND_INSTR(0xFF, 0x04),
 	ILI9881C_COMMAND_INSTR(0x6C, 0x15),
-	ILI9881C_COMMAND_INSTR(0x6E, 0x22),
+	ILI9881C_COMMAND_INSTR(0x6E, 0x2A),
 	ILI9881C_COMMAND_INSTR(0x6F, 0x33),
-	ILI9881C_COMMAND_INSTR(0x3A, 0xA4),
-	ILI9881C_COMMAND_INSTR(0x8D, 0x0D),
+	ILI9881C_COMMAND_INSTR(0x3A, 0x24),
+	ILI9881C_COMMAND_INSTR(0x8D, 0x14),
 	ILI9881C_COMMAND_INSTR(0x87, 0xBA),
 	ILI9881C_COMMAND_INSTR(0x26, 0x76),
 	ILI9881C_COMMAND_INSTR(0xB2, 0xD1),
-	ILI9881C_SWITCH_PAGE_INSTR(1),
+	ILI9881C_COMMAND_INSTR(0xB5, 0xD7),
+	ILI9881C_COMMAND_INSTR(0x35, 0x1F),
+	ILI9881C_COMMAND_INSTR(0xFF, 0x01),
 	ILI9881C_COMMAND_INSTR(0x22, 0x0A),
-	ILI9881C_COMMAND_INSTR(0x53, 0xDC),
-	ILI9881C_COMMAND_INSTR(0x55, 0xA7),
-	ILI9881C_COMMAND_INSTR(0x50, 0x78),
-	ILI9881C_COMMAND_INSTR(0x51, 0x78),
-	ILI9881C_COMMAND_INSTR(0x31, 0x02),
-	ILI9881C_COMMAND_INSTR(0x60, 0x14),
-	ILI9881C_COMMAND_INSTR(0xA0, 0x2A),
-	ILI9881C_COMMAND_INSTR(0xA1, 0x39),
-	ILI9881C_COMMAND_INSTR(0xA2, 0x46),
-	ILI9881C_COMMAND_INSTR(0xA3, 0x0e),
-	ILI9881C_COMMAND_INSTR(0xA4, 0x12),
-	ILI9881C_COMMAND_INSTR(0xA5, 0x25),
-	ILI9881C_COMMAND_INSTR(0xA6, 0x19),
-	ILI9881C_COMMAND_INSTR(0xA7, 0x1d),
-	ILI9881C_COMMAND_INSTR(0xA8, 0xa6),
+	ILI9881C_COMMAND_INSTR(0x53, 0x72),
+	ILI9881C_COMMAND_INSTR(0x55, 0x77),
+	ILI9881C_COMMAND_INSTR(0x50, 0xA6),
+	ILI9881C_COMMAND_INSTR(0x51, 0xA6),
+	ILI9881C_COMMAND_INSTR(0x31, 0x00),
+	ILI9881C_COMMAND_INSTR(0x60, 0x20),
+	ILI9881C_COMMAND_INSTR(0xA0, 0x08),
+	ILI9881C_COMMAND_INSTR(0xA1, 0x1A),
+	ILI9881C_COMMAND_INSTR(0xA2, 0x2A),
+	ILI9881C_COMMAND_INSTR(0xA3, 0x14),
+	ILI9881C_COMMAND_INSTR(0xA4, 0x17),
+	ILI9881C_COMMAND_INSTR(0xA5, 0x2B),
+	ILI9881C_COMMAND_INSTR(0xA6, 0x1D),
+	ILI9881C_COMMAND_INSTR(0xA7, 0x20),
+	ILI9881C_COMMAND_INSTR(0xA8, 0x9D),
 	ILI9881C_COMMAND_INSTR(0xA9, 0x1C),
 	ILI9881C_COMMAND_INSTR(0xAA, 0x29),
-	ILI9881C_COMMAND_INSTR(0xAB, 0x85),
-	ILI9881C_COMMAND_INSTR(0xAC, 0x1C),
-	ILI9881C_COMMAND_INSTR(0xAD, 0x1B),
-	ILI9881C_COMMAND_INSTR(0xAE, 0x51),
-	ILI9881C_COMMAND_INSTR(0xAF, 0x22),
-	ILI9881C_COMMAND_INSTR(0xB0, 0x2d),
-	ILI9881C_COMMAND_INSTR(0xB1, 0x4f),
-	ILI9881C_COMMAND_INSTR(0xB2, 0x59),
-	ILI9881C_COMMAND_INSTR(0xB3, 0x3F),
-	ILI9881C_COMMAND_INSTR(0xC0, 0x2A),
-	ILI9881C_COMMAND_INSTR(0xC1, 0x3a),
-	ILI9881C_COMMAND_INSTR(0xC2, 0x45),
-	ILI9881C_COMMAND_INSTR(0xC3, 0x0e),
-	ILI9881C_COMMAND_INSTR(0xC4, 0x11),
-	ILI9881C_COMMAND_INSTR(0xC5, 0x24),
-	ILI9881C_COMMAND_INSTR(0xC6, 0x1a),
-	ILI9881C_COMMAND_INSTR(0xC7, 0x1c),
-	ILI9881C_COMMAND_INSTR(0xC8, 0xaa),
-	ILI9881C_COMMAND_INSTR(0xC9, 0x1C),
+	ILI9881C_COMMAND_INSTR(0xAB, 0x8F),
+	ILI9881C_COMMAND_INSTR(0xAC, 0x20),
+	ILI9881C_COMMAND_INSTR(0xAD, 0x1F),
+	ILI9881C_COMMAND_INSTR(0xAE, 0x4F),
+	ILI9881C_COMMAND_INSTR(0xAF, 0x23),
+	ILI9881C_COMMAND_INSTR(0xB0, 0x29),
+	ILI9881C_COMMAND_INSTR(0xB1, 0x56),
+	ILI9881C_COMMAND_INSTR(0xB2, 0x66),
+	ILI9881C_COMMAND_INSTR(0xB3, 0x39),
+	ILI9881C_COMMAND_INSTR(0xC0, 0x08),
+	ILI9881C_COMMAND_INSTR(0xC1, 0x1A),
+	ILI9881C_COMMAND_INSTR(0xC2, 0x2A),
+	ILI9881C_COMMAND_INSTR(0xC3, 0x15),
+	ILI9881C_COMMAND_INSTR(0xC4, 0x17),
+	ILI9881C_COMMAND_INSTR(0xC5, 0x2B),
+	ILI9881C_COMMAND_INSTR(0xC6, 0x1D),
+	ILI9881C_COMMAND_INSTR(0xC7, 0x20),
+	ILI9881C_COMMAND_INSTR(0xC8, 0x9D),
+	ILI9881C_COMMAND_INSTR(0xC9, 0x1D),
 	ILI9881C_COMMAND_INSTR(0xCA, 0x29),
-	ILI9881C_COMMAND_INSTR(0xCB, 0x96),
-	ILI9881C_COMMAND_INSTR(0xCC, 0x1C),
-	ILI9881C_COMMAND_INSTR(0xCD, 0x1B),
-	ILI9881C_COMMAND_INSTR(0xCE, 0x51),
-	ILI9881C_COMMAND_INSTR(0xCF, 0x22),
-	ILI9881C_COMMAND_INSTR(0xD0, 0x2b),
-	ILI9881C_COMMAND_INSTR(0xD1, 0x4b),
-	ILI9881C_COMMAND_INSTR(0xD2, 0x59),
-	ILI9881C_COMMAND_INSTR(0xD3, 0x3F),
+	ILI9881C_COMMAND_INSTR(0xCB, 0x8F),
+	ILI9881C_COMMAND_INSTR(0xCC, 0x20),
+	ILI9881C_COMMAND_INSTR(0xCD, 0x1F),
+	ILI9881C_COMMAND_INSTR(0xCE, 0x4F),
+	ILI9881C_COMMAND_INSTR(0xCF, 0x24),
+	ILI9881C_COMMAND_INSTR(0xD0, 0x29),
+	ILI9881C_COMMAND_INSTR(0xD1, 0x56),
+	ILI9881C_COMMAND_INSTR(0xD2, 0x66),
+	ILI9881C_COMMAND_INSTR(0xD3, 0x39),
+	ILI9881C_COMMAND_INSTR(0xFF, 0x00),
+	ILI9881C_COMMAND_INSTR(0x11, 0x00),
 };
 
 static inline struct ili9881c *panel_to_ili9881c(struct drm_panel *panel)
@@ -297,46 +274,11 @@ static int ili9881c_send_cmd_data(struct ili9881c *ctx, u8 cmd, u8 data)
 static int ili9881c_prepare(struct drm_panel *panel)
 {
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
-	unsigned int i;
-	int ret;
-
-	/* Power the panel */
-	ret = regulator_enable(ctx->power);
-	if (ret)
-		return ret;
-	msleep(5);
-
-	/* And reset it */
-	gpiod_set_value(ctx->reset, 1);
-	msleep(20);
 
-	gpiod_set_value(ctx->reset, 0);
-	msleep(20);
+	if (ctx->prepared)
+                 return 0;
 
-	for (i = 0; i < ARRAY_SIZE(ili9881c_init); i++) {
-		const struct ili9881c_instr *instr = &ili9881c_init[i];
-
-		if (instr->op == ILI9881C_SWITCH_PAGE)
-			ret = ili9881c_switch_page(ctx, instr->arg.page);
-		else if (instr->op == ILI9881C_COMMAND)
-			ret = ili9881c_send_cmd_data(ctx, instr->arg.cmd.cmd,
-						      instr->arg.cmd.data);
-
-		if (ret)
-			return ret;
-	}
-
-	ret = ili9881c_switch_page(ctx, 0);
-	if (ret)
-		return ret;
-
-	ret = mipi_dsi_dcs_set_tear_on(ctx->dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
-	if (ret)
-		return ret;
-
-	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
-	if (ret)
-		return ret;
+	ctx->prepared = true;
 
 	return 0;
 }
@@ -347,7 +289,7 @@ static int ili9881c_enable(struct drm_panel *panel)
 
 	msleep(120);
 
-	mipi_dsi_dcs_set_display_on(ctx->dsi);
+	//mipi_dsi_dcs_set_display_on(ctx->dsi);
 	backlight_enable(ctx->backlight);
 
 	return 0;
@@ -364,27 +306,29 @@ static int ili9881c_disable(struct drm_panel *panel)
 static int ili9881c_unprepare(struct drm_panel *panel)
 {
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
+	
+	if (!ctx->prepared)
+        	return 0;
 
-	mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
-	regulator_disable(ctx->power);
-	gpiod_set_value(ctx->reset, 1);
+	ctx->prepared = false;
 
 	return 0;
 }
 
 static const struct drm_display_mode bananapi_default_mode = {
-	.clock		= 62000,
-	.vrefresh	= 60,
+	.clock		= 54000,
+	.vrefresh	= 40,
 
 	.hdisplay	= 720,
-	.hsync_start	= 720 + 10,
-	.hsync_end	= 720 + 10 + 20,
-	.htotal		= 720 + 10 + 20 + 30,
+	.hsync_start	= 720 + 20,
+	.hsync_end	= 720 + 20 + 2,
+	.htotal		= 720 + 20 + 2 + 20,
 
 	.vdisplay	= 1280,
-	.vsync_start	= 1280 + 10,
-	.vsync_end	= 1280 + 10 + 10,
-	.vtotal		= 1280 + 10 + 10 + 20,
+	.vsync_start	= 1280 + 15,
+	.vsync_end	= 1280 + 15 + 2,
+	.vtotal		= 1280 + 15 + 2 + 10,
+	.flags		= 0,
 };
 
 static int ili9881c_get_modes(struct drm_panel *panel)
@@ -407,8 +351,8 @@ static int ili9881c_get_modes(struct drm_panel *panel)
 	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
 	drm_mode_probed_add(connector, mode);
 
-	panel->connector->display_info.width_mm = 62;
-	panel->connector->display_info.height_mm = 110;
+	panel->connector->display_info.width_mm = 90;
+	panel->connector->display_info.height_mm = 152;
 
 	return 1;
 }
@@ -462,9 +406,9 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
 	if (ret < 0)
 		return ret;
 
-	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST | MIPI_DSI_MODE_LPM;
 	dsi->format = MIPI_DSI_FMT_RGB888;
-	dsi->lanes = 4;
+	dsi->lanes = 2;
 
 	return mipi_dsi_attach(dsi);
 }
@@ -483,7 +427,7 @@ static int ili9881c_dsi_remove(struct mipi_dsi_device *dsi)
 }
 
 static const struct of_device_id ili9881c_of_match[] = {
-	{ .compatible = "bananapi,lhr050h41" },
+	{ .compatible = "powertip,ph720128t003" },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ili9881c_of_match);
diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 1f7836be2..a066908e0 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -1271,12 +1271,6 @@ int ltdc_load(struct drm_device *ddev)
 
 	mutex_init(&ldev->err_lock);
 
-	if (!IS_ERR(rstc)) {
-		reset_control_assert(rstc);
-		usleep_range(10, 20);
-		reset_control_deassert(rstc);
-	}
-
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	ldev->regs = devm_ioremap_resource(dev, res);
 	if (IS_ERR(ldev->regs)) {
